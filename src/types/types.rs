use ndarray::Array2;
use std::collections::{HashMap, HashSet, VecDeque};

use crate::structs::cycle::Cycle;
use crate::structs::vector::{Vector3D, Vector2D};

pub type Adjacency = HashMap<Node, Nodes>;
pub type AdjC<'a> = [(Node, &'a [Node])];
pub type Bobbins = Vec<Node>;
pub type Count = usize;
pub type Done = HashSet<usize>;
pub type Edge = (Node, Node);
pub type Edges = HashSet<Edge>;
pub type EdgeAdjacency = HashMap<Edge, HashSet<Edge>>;
pub type Idx = Count;
pub type Idxs = Vec<Idx>;
pub type Loom = Vec<VecDeque<Node>>;
pub type Neighbors = HashSet<Node>;
pub type Node = u32;
pub type Nodes = HashSet<Node>;
pub type Path = Vec<Node>;
pub type Paths = Vec<Path>;
pub type PathSlice<'a> = &'a [Node];
pub type Point = i32;
pub type Points = HashSet<Point>;
pub type Solution = Path;
pub type Spool = HashMap<u32, Yarn>;
pub type Subtours = Vec<Vec<Node>>;
pub type Thread = VecDeque<Node>;
pub type V2d = [Point; 2];
pub type V2Slice<'a> = &'a [V2d];
pub type V3d = [Point; 3];
pub type V3Slice<'a> = &'a [V3d];
pub type Vectors2d = Vec<Vector2D>;
pub type Vectors3d = Vec<Vector3D>;
pub type Vert2d = (Point, Point);
pub type Vert2dd = Vec<Vert2d>;
pub type Vert3d = (Point, Point, Point);
pub type VertsC2 = [Vert2d];
pub type VertsC3 = [Vert3d];
pub type VertIdx<'a> = HashMap<&'a Vector3D, Node>;
pub type WarpedLoom<'a> = HashMap<usize, &'a mut Cycle<'a>>;
pub type Warps = Paths;
pub type Wefts = Loom;
pub type Weights = HashMap<Node, i32>;
pub type Woven = Vec<usize>;
pub type Yarn = Array2<Point>;
pub type ZlevelNodesMap = HashMap<Point, Nodes>;
pub type ZOrder = Vec<(Point, usize)>;